name: Run the Demo Infrastructure

# on:[push]
on:
  workflow_dispatch:
    inputs:
      is_destroy:
        type: boolean
        description: Destroy environment? (default without -destory oprtions)
        required: true
        default: false
      is_lock:
        type: boolean
        description: Lock environment or not? (default -lock=true)
        required: true
        default: true

  pull_request:
    paths:
    - infra/**

env:
  tf_actions_working_dir: infra

permissions:
  id-token: write
  contents: read

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: production
    outputs:
      tfplanExitCode: ${{ steps.plan.outputs.exitcode }}
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
    - uses: actions/checkout@v3

    - name: Log in to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Terraform Quality Checks
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v3

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact

    - name: Calculate destroy arg
      id: destroy_arg
      run: |
        if [ "$DESTROY" == "true" ]; then
          echo "::set-output name=val::-destroy"
        else
          echo "::set-output name=val:: "
        fi
      env:
        DESTROY: ${{ github.event.inputs.is_destroy }}

    - name: Calculate lock arg
      id: lock_arg
      run: |
        if [ "$LOCK" == "true" ]; then
          echo "::set-output name=val:: "
        else
          echo "::set-output name=val::-lock=false"
        fi
      env:
        LOCK: ${{ github.event.inputs.is_lock }}

    - name: Terraform Plan
      id: plan
      run: terraform plan $DESTROY $LOCK -no-color --out=out.tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
        DESTROY: ${{ steps.destroy_arg.outputs.val }}
        LOCK: ${{ steps.lock_arg.outputs.val }}

    # https://github.com/marketplace/actions/trufflehog-oss
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@v3.52.1
      with:
        path: ${{ env.tf_actions_working_dir }}

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tf-plan
        path: ${{ env.tf_actions_working_dir }}/out.tfplan

    - name: Create the plan summary
      uses: actions/github-script@v6
      if: always()
      id: summary
      env:
        PLAN: '${{ steps.plan.outputs.stdout }}'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Prep the output
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 2. Set the output variable
          const fs = require('fs');
          fs.writeFileSync('${{ env.tf_actions_working_dir }}/summary.md', output);
          core.setOutput('summary', output);

    - name: Write the step summary
      if: always()
      run: cat summary.md >> $GITHUB_STEP_SUMMARY

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: production
    needs: [plan]
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      working-directory: ${{ env.tf_actions_working_dir }}

    # Download saved plan from artifacts
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tf-plan
        path: ${{ env.tf_actions_working_dir }}

    - name: Display structure of downloaded files
      run: ls -laR

    - name: Calculate lock arg
      id: lock_arg
      run: |
        if [ "$LOCK" == "true" ]; then
          echo "::set-output name=val:: "
        else
          echo "::set-output name=val::-lock=false"
        fi
      env:
        LOCK: ${{ github.event.inputs.is_lock }}

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply $LOCK -auto-approve out.tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
        LOCK: ${{ steps.lock_arg.outputs.val }}
      working-directory: ${{ env.tf_actions_working_dir }}

  hack:
    name: Hack for Application chatgpt-lite
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v3

    - name: Log in to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Service Account Issuers
      run: |
        echo "SERVICE_ACCOUNT_ISSUER=$(az aks show --resource-group rg-devdaysasia2023 --name aks-devdaysasia2023 --query oidcIssuerProfile.issuerUrl -otsv)" >> $GITHUB_ENV"

        - name: Create credential.json
        run: echo '{"issuer": "'"${SERVICE_ACCOUNT_ISSUER}"'"}' > credential.json

    - name: Update Service Principle
      run: |
        az ad app federated-credential update --id ${{ secrets.AZURE_CLIENT_ID }} --federation-provider-id ${{ secrets.FEDERATION_PROVIDER_ID }} --parameters credential.json